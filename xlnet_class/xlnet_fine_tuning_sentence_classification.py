"""XLNet_Fine-Tuning_Sentence_Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k3HV_SrLNzi_TS76JSe0Oy7h8eBI2HRC

GPU使用：Edit -> Notebook Settings -> Add accelerator (GPU)
"""

"""检测是否gpu是否可用"""
import tensorflow as tf
device_name = tf.test.gpu_device_name()
if device_name != "/device:GPU:0":
  raise SystemError("GPU device not found")
print("Found GPU at: {}".format(device_name))

#-*- coding:utf-8 -*-

"""安装pytorch-transformers"""

# collab 安装 pytorch-transformers
# !pip install pytorch-transformers

"""加载必要的库"""
# Commented out IPython magic to ensure Python compatibility.
import torch

# pytorch 处理数据的包
from torch.utils.data import TensorDataset, DataLoader,RandomSampler,SequentialSampler

# 对数据进行补齐功能的包
from keras.preprocessing.sequence import pad_sequences

# 数据分割
from sklearn.model_selection import train_test_split

# 英文分词， 分类
from pytorch_transformers import XLNetModel, XLNetTokenizer, XLNetForSequenceClassification

# Adam + L2正则
from pytorch_transformers import AdamW

# 比较常用的包
from tqdm import tqdm, trange
import pandas as pd
import io
import numpy as np
import matplotlib.pyplot as plt
# % matplotlib inline # 当你调用matplotlib.pyplot的绘图函数plot()进行绘图的时候，或者生成一个figure画布的时候，可以直接在你的python console里面生成图像

import os

"""把xlnet分类模型文件拷到C盘下"""
os.system("copy_xnet_class_premodel.bat")

"""指定GPU"""

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
n_gpu = torch.cuda.device_count()
torch.cuda.get_device_name(0)

"""加载数据。
https://nyu-mll.github.io/CoLA/
 使用raw数据集。
"""

# from google.colab import files
# uploaded = files.upload()

df = pd.read_csv("in_domain_train.tsv", delimiter='\t', header=None, names=['sentence_source', 'label', 'label_notes', 'sentence'])
# df.shape

"""Column 1: 句子来源

Column 2: 句子标签，是否可靠 (0=unacceptable, 1=acceptable)

Column 3: NaN或者*

Column 4: 句子
"""

df.sample(10)

"""
Bert 分类格式
Bert：[CLS] + Sentence_A + [SEP] + Sentence_B + [SEP]

XLNet 分类格式
XLNet：Sentence_A + [SEP] + Sentence_B + [SEP] + [CLS]
"""

sentences = df.sentence.values
sentences = [sentence + " [SEP] [CLS]" for sentence in sentences]
labels = df.label.values
# sentences[:10]

"""分词工作"""
# xlnet-base-cased 已经训练好的模型（小型）
tokenizer = XLNetTokenizer.from_pretrained('xlnet-base-cased', do_lower_case=True)

tokenized_texts = [tokenizer.tokenize(sent) for sent in sentences]
print ("Tokenize the first sentence:")
# print (tokenized_texts[0])

"""截长补短的方式：‘pre’或‘post’"""
"""pad_sequences 来自于keras"""
MAX_LEN = 25
input_ids = [tokenizer.convert_tokens_to_ids(x) for x in tokenized_texts] # 将token转换成id

# 长于25的被截取掉 不够补0
input_ids = pad_sequences(input_ids, maxlen=MAX_LEN, dtype="long", truncating="post", padding="post")

"""XLNet所需要的输入：

*   input ids
*   segment mask （可选）
*   attention mask (可选)
*   labels
"""

# Create attention masks
attention_masks = []

# 补0处不参与计算 >0为1 否则为0 转换成浮点数行书
for seq in input_ids:
  seq_mask = [float(i>0) for i in seq]
  attention_masks.append(seq_mask)

# 切分训练集和测试集
train_inputs, validation_inputs, train_labels, validation_labels = train_test_split(input_ids, labels, random_state=2019, test_size=0.1)
train_masks, validation_masks, _, _ = train_test_split(attention_masks, input_ids, random_state=2019, test_size=0.1)

# 转换成torch到的数据格式
train_inputs = torch.tensor(train_inputs).to(torch.int64)
validation_inputs = torch.tensor(validation_inputs).to(torch.int64)
train_labels = torch.tensor(train_labels)
validation_labels = torch.tensor(validation_labels)
train_masks = torch.tensor(train_masks)
validation_masks = torch.tensor(validation_masks)

# 训练数据batch
batch_size = 32 #batchsize
train_data = TensorDataset(train_inputs, train_masks, train_labels) # input_ids, attention_mask, labels
train_sampler = RandomSampler(train_data) # 训练时需要shuffle数据 RandomSampler从迭代器里面随机取样本
train_dataloader = DataLoader(train_data, sampler=train_sampler, batch_size=batch_size) # 把把数据放入DataLoader迭代器里面

validation_data = TensorDataset(validation_inputs, validation_masks, validation_labels)# input_ids, attention_mask, labels
validation_sampler = SequentialSampler(validation_data) #测试时不需要shuffle数据
validation_dataloader = DataLoader(validation_data, sampler=validation_sampler, batch_size=batch_size)# 把把数据放入DataLoader迭代器里面

"""“xlnet-base-cased”：小模型

问：是否冻结预训练参数？
"""

# Xlnet分类模型 第一次使用需要下载 很大
model = XLNetForSequenceClassification.from_pretrained("xlnet-base-cased", num_labels=2)
model.cuda()

"""定义优化器，注意BertAdam、AdamW是不同版本的adam优化方法。  
  
定义需要weight decay的参数： 
‘gamma’, ‘beta’ 属于LayerNormal层的，不要decay，直接训练即可。 

 各种归一化： https://www.jianshu.com/p/05de1f989790 
  
   https://mlexplained.com/2018/11/30/an-overview-of-normalization-methods-in-deep-learning/
  
其他参数除去bias，均使用weight decay的方法进行训练weight decay（可以简单理解在Adam上的一个优化的基础上成使用L2正则）。
"""

param_optimizer = list(model.named_parameters())

# bias:偏置
# gamma,beta:normalization layer参数
no_decay = ['bias', 'gamma', 'beta']
optimizer_grouped_parameters = [
    {'params': [p for n, p in param_optimizer if not any(nd in n for nd in no_decay)],
     'weight_decay_rate': 0.01},
    {'params': [p for n, p in param_optimizer if any(nd in n for nd in no_decay)],
     'weight_decay_rate': 0.0}
]
optimizer = AdamW(optimizer_grouped_parameters,
                     lr=2e-5)

"""Training过程:

    通过将模型设置为训练模式，模型需要计算梯度
    准备数据输入和标签
    将数据加载到GPU上进行加速
    清除上一遍计算出的梯度
    正向传递（通过网络输入数据）
    向后传递（反向传播）
    告诉网络使用optimizer.step（）更新参数
    跟踪变量以监视进度

Evalution过程(不需要更新反向传播梯度):
    切换成eval状态
    通过将模型设置为验证模型，告诉模型不要计算梯度
    准备数据输入和标签
    将数据加载到GPU上进行加速
    正向传递（通过网络输入数据）
    计算验证数据的损失并跟踪变量以监控进度
"""

def flat_accuracy(preds, labels):
    pred_flat = np.argmax(preds, axis=1).flatten() # 预测值flatten摊平 [32]
    labels_flat = labels.flatten()  #真实值摊平
    return np.sum(pred_flat == labels_flat) / len(labels_flat)

# Store our loss and accuracy for plotting
train_loss_set = []

# Number of training epochs (authors recommend between 2 and 4)
epochs = 4

# trange is a tqdm wrapper around the normal python range
for _ in trange(epochs, desc="Epoch"):

  # Training
  
  # 通过将模型设置为训练模式，模型需要计算梯度
  model.train()
  
  # Tracking variables
  tr_loss = 0
  nb_tr_examples, nb_tr_steps = 0, 0
  
  # 准备数据输入和标签
  for step, batch in enumerate(train_dataloader):
    # 将数据加载到GPU上进行加速
    batch = tuple(t.to(device) for t in batch)
    # Unpack the inputs from our dataloader
    b_input_ids, b_input_mask, b_labels = batch
    #  清除上一遍计算出的梯度
    optimizer.zero_grad()
    #  正向传递（通过网络输入数据）
    outputs = model(b_input_ids, token_type_ids=None, attention_mask=b_input_mask, labels=b_labels)
    loss = outputs[0]
    logits = outputs[1] #shape:[32,2]
    train_loss_set.append(loss.item())    
    # 向后传递（反向传播）
    loss.backward()
    # 告诉网络使用optimizer.step（）更新参数
    optimizer.step()

    # Update tracking variables
    tr_loss += loss.item() #累加loss
    nb_tr_examples += b_input_ids.size(0)
    nb_tr_steps += 1

  print("Train loss: {}".format(tr_loss/nb_tr_steps))

  # Validation
  # Put model in evaluation mode to evaluate loss on the validation set
  model.eval()

  # Tracking variables 
  eval_loss, eval_accuracy = 0, 0
  nb_eval_steps, nb_eval_examples = 0, 0

  # Evaluate data for one epoch
  for batch in validation_dataloader:
    # Add batch to GPU
    batch = tuple(t.to(device) for t in batch)
    # Unpack the inputs from our dataloader
    b_input_ids, b_input_mask, b_labels = batch
    # Telling the model not to compute or store gradients, saving memory and speeding up validation
    with torch.no_grad():
      # Forward pass, calculate logit predictions
      output = model(b_input_ids, token_type_ids=None, attention_mask=b_input_mask) # 不传labels
      logits = output[0] #[32,2]
    
    # Move logits and labels to CPU
    logits = logits.detach().cpu().numpy() #shape:[32,2]
    label_ids = b_labels.to('cpu').numpy()

    tmp_eval_accuracy = flat_accuracy(logits, label_ids)
    
    eval_accuracy += tmp_eval_accuracy
    nb_eval_steps += 1

  print("Validation Accuracy: {}".format(eval_accuracy/nb_eval_steps))

"""删除C盘下的xlnet分类模型文件"""
os.system("del_xnet_class_premodel.bat")

plt.figure(figsize=(15,8))
plt.title("Training loss")
plt.xlabel("Batch")
plt.ylabel("Loss")
plt.plot(train_loss_set)
plt.show()